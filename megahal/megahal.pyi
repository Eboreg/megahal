from typing import TYPE_CHECKING, Any, Dict, List, Optional, Type, Union, cast

from twitterhal.models import BaseDatabase

API_VERSION: str
DEFAULT_AUXWORDS: List[str]
DEFAULT_BANWORDS: List[str]
DEFAULT_ORDER: int
DEFAULT_SWAPWORDS: List[str]
DEFAULT_TIMEOUT: float
END_WORD: str
ERROR_WORD: str


class DBInstance(BaseDatabase):
    api: str
    order: int
    forward: Tree
    backward: Tree
    dictionary: Dictionary


class Reply:
    text: str
    levenshtein: float
    surprise: float
    rating: float

    def __init__(self, text: str, levenshtein: float, surprise: float): ...


class Tree:
    children: List[Tree]
    def __init__(self, symbol: int): ...
    def add_symbol(self, symbol: int) -> Tree: ...
    def get_child(self, symbol: int, add: bool) -> Optional[Tree]: ...


class Dictionary(list):
    def add_word(self, word: str) -> int: ...
    def find_word(self, word: str) -> int: ...


class Brain:
    auxwords: List[str]
    banwords: List[str]
    db: DBInstance
    end_symbol: int
    error_symbol: int
    order: int
    swapwords: Dict[str, str]
    timeout: Union[float, int]

    def __del__(self): ...
    def __init__(self, db: DBInstance, order: Optional[int], timeout: Union[int, float, None], banwords: Optional[List[str]], auxwords: Optional[List[str]], swapwords: Optional[Dict[str, str]]): ...
    @staticmethod
    def get_words_from_phrase(phrase: str) -> List[str]: ...
    def close(self): ...
    def communicate(self, phrase: str, learn: bool, reply: bool, max_length: Optional[int], timeout: Union[float, int, None]) -> Optional[Reply]: ...
    def evaluate_reply(self, keys: List[str], words: List[str]) -> float: ...
    def generate_replywords(self, keys: Optional[List[str]]) -> List[str]: ...
    def get_context(self, tree: Tree) -> Dict: ...
    def get_replies(self, words: List[str], max_length: Optional[int], timeout: Union[int, float, None]) -> List[Reply]: ...
    def get_reply(self, words: List[str], max_length: Optional[int], timeout: Union[int, float, None]) -> Optional[Reply]: ...
    def init_db(self, clear: bool): ...
    def learn(self, words: List[str]): ...
    def make_keywords(self, words: List[str]) -> Dictionary: ...
    def sync(self): ...


class MegaHAL:
    auxwords: List[str]
    banwords: List[str]
    brain: Brain
    brainsize: int
    swapwords: Dict[str, str]

    def __init__(self, order: Optional[int], db: Optional[DBInstance], timeout: Optional[int], banwords: Optional[List[str]], auxwords: Optional[List[str]], swapwords: Optional[Dict[str, str]], max_length: Optional[int]): ...
    def clear(self): ...
    def close(self): ...
    def get_reply_nolearn(self, phrase: str, max_length: Optional[int], timeout: Union[float, int, None]) -> Optional[Reply]: ...
    def get_reply(self, phrase: str, max_length: Optional[int], timeout: Union[float, int, None]) -> Optional[Reply]: ...
    def interact(self, timeout: int): ...
    def learn(self, phrase: str): ...
    def sync(self): ...
    def train(self, file: str): ...
